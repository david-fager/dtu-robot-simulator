@App:name("AmazonCEPEngineApp")


@App:description("CEP engine for Amazon robitcs fulfillment center")

@source(type='http', receiver.url='http://127.0.0.1:8001/sensor', 
    @map(type='json',
        @attributes(time='$.time',robotId = '$.robotID', tempKelv = '$.motorTemperature', res = '$.batteryResistance'))) 
define stream MonitoringDataStream (time int, robotId string, tempKelv float, res float);

@source(type='file',
mode='LINE',
tailing='true',
/*file.uri='file:\\C:\Users\User\Desktop\siddhi-tooling-5.1.2\resources\files\robot_rep_data.txt', /** remember to change the uri of the file accordingly - keep file:\ **/
/*file.uri='file:\\C:\Users\User\Desktop\siddhi-tooling-5.1.2\resources\files\robot_rep_data.txt', /** remember to change the uri of the file accordingly - keep file:\ **/
file.uri='file:\\C:\Users\Stina\Documents\DTU\2_Semester\02268_Procesorienterede_og_event-drevne_softwaresystemer\siddhi-tooling-5.1.2\resources\files\robot_rep_data.txt', 
@map(type='json'))
define stream dbStream (robotId string, repReason string, isRepair bool, isOffRoute bool);

@source(type = 'http', receiver.url = "http://127.0.0.1:8001/movement", 
    @map(type = 'json', 
        @attributes(time = "$.time", robotId = "$.robotID", expectedPositionX = "$.expectedPositionX", expectedPositionY = "$.expectedPositionY", currentPositionX = "$.currentPositionX", currentPositionY = "$.currentPositionY")))
define stream PositionDataStream (time int, robotId string, expectedPositionX int, expectedPositionY int, currentPositionX int, currentPositionY int);



@sink(type = 'log', prefix = "position status:")
define stream PositionOutStream (messageName string, startTime int, robotId string, currentPositionX int, currentPositionY int, finalTemp double, finalRes float, lastRepReason string);



@sink(type='log', prefix='temperature status:')
@sink(type='http',
    /*publisher.url= 'http://127.0.0.1:8080/engine-rest/message',
        headers = "'Host:127.0.0.1'", */
    publisher.url = 'http://localhost:8080/engine-rest/message', 
        headers = "'Host:localhost:8080",
        @map(type='json', @payload("""{"messageName": "{{messageName}}",
            "processVariables": {
                "robotId" : { 
                  "value" : "{{robotId}}", 
                  "type" : "String" },
                "finalTemp" : { 
                  "value" : "{{finalTemp}}", 
                  "type" : "Double" },
                "finalRes" : { 
                  "value" : null, 
                  "type" : "Double" },
                "lastRepReason" : { 
                  "value" : "{{lastRepReason}}", 
                  "type" : "String" }
              
            }
        }
        """)))
define stream TempOutStream(messageName string, startTime int, robotId string, initialTemp double, finalTemp double, lastRepReason string);

@sink(type='log', prefix='resistance status:')
@sink(type='http',
    publisher.url= 'http://127.0.0.1:8080/engine-rest/message',
        headers = "'Host:127.0.0.1'", 
        @map(type='json', @payload("""{"messageName": "{{messageName}}",
            "processVariables": {
                "robotId" : { 
                  "value" : "{{robotId}}", 
                  "type" : "String" },
                "finalTemp" : { 
                  "value" : "null", 
                  "type" : "Double" },
                "finalRes" : { 
                  "value" : "{{finalRes}}", 
                  "type" : "Double" },
                "lastRepReason" : { 
                  "value" : "{{lastRepReason}}", 
                  "type" : "String" }
            }
        }
        """)))
define stream ResOutStream(messageName string, startTime int, robotId string, initialRes int, finalRes float, lastRepReason string);

@primaryKey('robotId')
@index('robotId')
define table robotTable (robotId string, lastRepReason string, isRepair bool, isOffRoute bool);

@source(type='http', receiver.url="http://127.0.0.1:8001/camunda-stream", @map(type='json'))
@sink(type='log' , prefix='Robot maintenance area: ') 
/** define stream robotMaintenanceStream(maintenanceArea string); **/
/** generic stream from camunda - all streams contains a string message from a service task or user task + robotId **/ 
define stream robotMaintenanceStream(message string, robotId string);

/*
********************* POSITION EPA's ***********************
*/
@info(name='transit-movement') 
from PositionDataStream, MonitoringDataStream
select  'message' as messageName,
        PositionDataStream.robotId as robotId, 
        PositionDataStream.time as time, 
        PositionDataStream.currentPositionX  as currentPositionX,
        PositionDataStream.currentPositionY  as currentPositionY,
        PositionDataStream.expectedPositionX as expectedPositionX,
        PositionDataStream.expectedPositionY as expectedPositionY,
        MonitoringDataStream.tempKelv as tempKelv, 
        MonitoringDataStream.res as res
insert into MovementSensorStream;

@info(name='convert-postion')
from MovementSensorStream
select robotId, time, tempKelv, res, currentPositionX, currentPositionY, NOT (currentPositionX == expectedPositionX and currentPositionY == expectedPositionY) as offRoute
insert into convertedMovementStream;

@info(name='filter-position')
from convertedMovementStream[offRoute == true]
select robotId, time, tempKelv, res, currentPositionX, currentPositionY, offRoute
insert into OffPositionStream;

@info(name='translate-fahrenheit-to-celc2')
from OffPositionStream
select time, robotId, math:round(math:floor(tempKelv-32.0)) / 1.8 as tempCelc, res, currentPositionX, currentPositionY, offRoute
insert into PositionTempTranslationStream;

@info(name='pattern-off-position')
from every( e1=PositionTempTranslationStream ) -> e2 = convertedMovementStream[e1.robotId == robotId] within 30 seconds
select e1.time as startTime, e1.robotId, e1.tempCelc, e1.res, e1.currentPositionX, e1.currentPositionY, e1.offRoute
insert into AlertOffPostion;


/***************************************** TEMPERATURE EPA's *****************************************/

/** translation of fahrenheit to celcius **/
@info(name='translate-fahrenheit-to-celc')
from MonitoringDataStream
select time, robotId, math:round(math:floor(tempKelv-32.0)) / 1.8 as tempCelc, res
insert into TempTranslationStream;


/** filter of temperature above threshold and projection to a subset of the attributes **/
@info(name='filter-high-temperature')
from TempTranslationStream[tempCelc >= 90]
select time, robotId, tempCelc
insert into HighTempStream;

/** pattern recognition of recieved event with too high temperature with new events still too high **/
@info(name='pattern-high-temperature')
from every( e1=HighTempStream ) -> e2=TempTranslationStream[ e1.robotId == robotId and (e1.tempCelc) <= tempCelc ]
    within 30 seconds
select e2.time as startTime, e1.robotId, e1.tempCelc as initialTemp, e2.tempCelc as finalTemp
insert into AlertHighTempStream;

/***************************************** RESISTANCE EPA's *****************************************/

/** filter of resistance above threshold and projection to a subset of the attributes **/
@info(name='filter-high-resistance')
from TempTranslationStream[res >= 1]
select time, robotId, math:round(res) as roundedRes
insert into HighResStream;

/** pattern recognition of recieved event with too high resistance with new events still too high **/
@info(name='pattern-high-resistance')
from every( e1=HighResStream ) -> e2=TempTranslationStream[e1.robotId == robotId and (e1.roundedRes) <= res ]
    within 30 seconds
select e2.time as startTime, e1.robotId, e1.roundedRes as initialRes, e2.res as finalRes
insert into AlertHighResStream;

/***************************************** In-memory table *****************************************/

/** insert into table from file source **/
from dbStream
select robotId, repReason as lastRepReason, isRepair, isOffRoute
update or insert into robotTable
set robotTable.isRepair = isRepair, robotTable.lastRepReason = lastRepReason
on robotTable.robotId == robotId;



/*
from AlertHighTempStream
select robotId
update robotLastRepTable
set robotLastRepTable.isRepair = true
on robotLastRepTable.robotId == robotId;

from AlertHighResStream
select robotId
update robotLastRepTable
set robotLastRepTable.isRepair = true
on robotLastRepTable.robotId == robotId;
*/

/***************************************** PRODUCE EVENT TO CONSUMER *****************************************/

/** enrich temp and resistance events with last rep reason attribute **/
from AlertHighTempStream as t join robotTable as r
    on t.robotId == r.robotId and r.isRepair == false 
select "msgSensorData" as messageName, t.startTime, t.robotId, t.initialTemp, t.finalTemp, r.lastRepReason
insert into TempOutStream;

/** Update DB **/
from AlertHighTempStream
select robotId
update robotTable
set robotTable.isRepair = true
on robotTable.robotId == robotId;


from AlertHighResStream as t join robotTable as r
    on t.robotId == r.robotId and r.isRepair == false
select "msgSensorData" as messageName, t.startTime, t.robotId, t.initialRes, t.finalRes, r.lastRepReason
insert into ResOutStream;

/** Update DB **/
from AlertHighResStream
select robotId
update robotTable
set robotTable.isRepair = true
on robotTable.robotId == robotId;

from AlertOffPostion as t join robotTable as r
    on t.robotId == r.robotId and r.isOffRoute == false
select "msgPositionData" as messageName, t.startTime, t.robotId, t.currentPositionX, t.currentPositionY, t.tempCelc as finalTemp, t.res as finalRes, r.lastRepReason
insert into PositionOutStream;

/** Update DB **/
from AlertOffPostion
select robotId
update robotTable
set robotTable.isOffRoute = true
on robotTable.robotId == robotId;
